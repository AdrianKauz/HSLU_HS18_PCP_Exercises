;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname PCP_Exercice_SW07) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; Aufgabe 2*
;; =============================================================================
; Die Definition einer strukturellen Rekursion könnte so aussehen:
(define (fib n)
  (cond
    ((or (= n 0) (= n 1)) n)
    (else (+ (fib (- n 1)) (fib (- n 2)))))
  )

;a) Implementieren Sie eine Rekursion mit Akkumulator. Nutzen Sie dazu die local Definition.
(define (fib n)
  (local (
          (define (fib-acc x current previous)
            (cond ((equal? x n) current)
                   (else (fib-acc (+ x 1)  (+ current previous) current))
            ))
          )
    (fib-acc 0 0 1)))

;b) Führen Sie Vergleich Tests mit und ohne Akkumulator durch. Welche Unterschiede sehen Sie?



;; =============================================================================
